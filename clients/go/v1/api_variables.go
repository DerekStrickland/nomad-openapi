/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// VariablesApiService VariablesApi service
type VariablesApiService service

type ApiDeleteVariableRequest struct {
	ctx _context.Context
	ApiService *VariablesApiService
	path string
	variable *Variable
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
	cas *int32
}

func (r ApiDeleteVariableRequest) Variable(variable Variable) ApiDeleteVariableRequest {
	r.variable = &variable
	return r
}
func (r ApiDeleteVariableRequest) Region(region string) ApiDeleteVariableRequest {
	r.region = &region
	return r
}
func (r ApiDeleteVariableRequest) Namespace(namespace string) ApiDeleteVariableRequest {
	r.namespace = &namespace
	return r
}
func (r ApiDeleteVariableRequest) XNomadToken(xNomadToken string) ApiDeleteVariableRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiDeleteVariableRequest) IdempotencyToken(idempotencyToken string) ApiDeleteVariableRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}
func (r ApiDeleteVariableRequest) Cas(cas int32) ApiDeleteVariableRequest {
	r.cas = &cas
	return r
}

func (r ApiDeleteVariableRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteVariableExecute(r)
}

/*
 * DeleteVariable Method for DeleteVariable
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param path A path to a Nomad Variable
 * @return ApiDeleteVariableRequest
 */
func (a *VariablesApiService) DeleteVariable(ctx _context.Context, path string) ApiDeleteVariableRequest {
	return ApiDeleteVariableRequest{
		ApiService: a,
		ctx: ctx,
		path: path,
	}
}

/*
 * Execute executes the request
 */
func (a *VariablesApiService) DeleteVariableExecute(r ApiDeleteVariableRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariablesApiService.DeleteVariable")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/var/{path}"
	localVarPath = strings.Replace(localVarPath, "{"+"path"+"}", _neturl.PathEscape(parameterToString(r.path, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.variable == nil {
		return nil, reportError("variable is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	if r.cas != nil {
		localVarQueryParams.Add("cas", parameterToString(*r.cas, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.variable
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetVariableQueryRequest struct {
	ctx _context.Context
	ApiService *VariablesApiService
	path string
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiGetVariableQueryRequest) Region(region string) ApiGetVariableQueryRequest {
	r.region = &region
	return r
}
func (r ApiGetVariableQueryRequest) Namespace(namespace string) ApiGetVariableQueryRequest {
	r.namespace = &namespace
	return r
}
func (r ApiGetVariableQueryRequest) Index(index int32) ApiGetVariableQueryRequest {
	r.index = &index
	return r
}
func (r ApiGetVariableQueryRequest) Wait(wait string) ApiGetVariableQueryRequest {
	r.wait = &wait
	return r
}
func (r ApiGetVariableQueryRequest) Stale(stale string) ApiGetVariableQueryRequest {
	r.stale = &stale
	return r
}
func (r ApiGetVariableQueryRequest) Prefix(prefix string) ApiGetVariableQueryRequest {
	r.prefix = &prefix
	return r
}
func (r ApiGetVariableQueryRequest) XNomadToken(xNomadToken string) ApiGetVariableQueryRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiGetVariableQueryRequest) PerPage(perPage int32) ApiGetVariableQueryRequest {
	r.perPage = &perPage
	return r
}
func (r ApiGetVariableQueryRequest) NextToken(nextToken string) ApiGetVariableQueryRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiGetVariableQueryRequest) Execute() (Variable, *_nethttp.Response, error) {
	return r.ApiService.GetVariableQueryExecute(r)
}

/*
 * GetVariableQuery Method for GetVariableQuery
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param path A path to a Nomad Variable
 * @return ApiGetVariableQueryRequest
 */
func (a *VariablesApiService) GetVariableQuery(ctx _context.Context, path string) ApiGetVariableQueryRequest {
	return ApiGetVariableQueryRequest{
		ApiService: a,
		ctx: ctx,
		path: path,
	}
}

/*
 * Execute executes the request
 * @return Variable
 */
func (a *VariablesApiService) GetVariableQueryExecute(r ApiGetVariableQueryRequest) (Variable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Variable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariablesApiService.GetVariableQuery")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/var/{path}"
	localVarPath = strings.Replace(localVarPath, "{"+"path"+"}", _neturl.PathEscape(parameterToString(r.path, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVariablesListRequestRequest struct {
	ctx _context.Context
	ApiService *VariablesApiService
	region *string
	namespace *string
	index *int32
	wait *string
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiGetVariablesListRequestRequest) Region(region string) ApiGetVariablesListRequestRequest {
	r.region = &region
	return r
}
func (r ApiGetVariablesListRequestRequest) Namespace(namespace string) ApiGetVariablesListRequestRequest {
	r.namespace = &namespace
	return r
}
func (r ApiGetVariablesListRequestRequest) Index(index int32) ApiGetVariablesListRequestRequest {
	r.index = &index
	return r
}
func (r ApiGetVariablesListRequestRequest) Wait(wait string) ApiGetVariablesListRequestRequest {
	r.wait = &wait
	return r
}
func (r ApiGetVariablesListRequestRequest) Stale(stale string) ApiGetVariablesListRequestRequest {
	r.stale = &stale
	return r
}
func (r ApiGetVariablesListRequestRequest) Prefix(prefix string) ApiGetVariablesListRequestRequest {
	r.prefix = &prefix
	return r
}
func (r ApiGetVariablesListRequestRequest) XNomadToken(xNomadToken string) ApiGetVariablesListRequestRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiGetVariablesListRequestRequest) PerPage(perPage int32) ApiGetVariablesListRequestRequest {
	r.perPage = &perPage
	return r
}
func (r ApiGetVariablesListRequestRequest) NextToken(nextToken string) ApiGetVariablesListRequestRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiGetVariablesListRequestRequest) Execute() ([]VariableMetadata, *_nethttp.Response, error) {
	return r.ApiService.GetVariablesListRequestExecute(r)
}

/*
 * GetVariablesListRequest Method for GetVariablesListRequest
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetVariablesListRequestRequest
 */
func (a *VariablesApiService) GetVariablesListRequest(ctx _context.Context) ApiGetVariablesListRequestRequest {
	return ApiGetVariablesListRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []VariableMetadata
 */
func (a *VariablesApiService) GetVariablesListRequestExecute(r ApiGetVariablesListRequestRequest) ([]VariableMetadata, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []VariableMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariablesApiService.GetVariablesListRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostVariableRequest struct {
	ctx _context.Context
	ApiService *VariablesApiService
	path string
	variable *Variable
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
	cas *int32
}

func (r ApiPostVariableRequest) Variable(variable Variable) ApiPostVariableRequest {
	r.variable = &variable
	return r
}
func (r ApiPostVariableRequest) Region(region string) ApiPostVariableRequest {
	r.region = &region
	return r
}
func (r ApiPostVariableRequest) Namespace(namespace string) ApiPostVariableRequest {
	r.namespace = &namespace
	return r
}
func (r ApiPostVariableRequest) XNomadToken(xNomadToken string) ApiPostVariableRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiPostVariableRequest) IdempotencyToken(idempotencyToken string) ApiPostVariableRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}
func (r ApiPostVariableRequest) Cas(cas int32) ApiPostVariableRequest {
	r.cas = &cas
	return r
}

func (r ApiPostVariableRequest) Execute() (Variable, *_nethttp.Response, error) {
	return r.ApiService.PostVariableExecute(r)
}

/*
 * PostVariable Method for PostVariable
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param path A path to a Nomad Variable
 * @return ApiPostVariableRequest
 */
func (a *VariablesApiService) PostVariable(ctx _context.Context, path string) ApiPostVariableRequest {
	return ApiPostVariableRequest{
		ApiService: a,
		ctx: ctx,
		path: path,
	}
}

/*
 * Execute executes the request
 * @return Variable
 */
func (a *VariablesApiService) PostVariableExecute(r ApiPostVariableRequest) (Variable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Variable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariablesApiService.PostVariable")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/var/{path}"
	localVarPath = strings.Replace(localVarPath, "{"+"path"+"}", _neturl.PathEscape(parameterToString(r.path, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.variable == nil {
		return localVarReturnValue, nil, reportError("variable is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	if r.cas != nil {
		localVarQueryParams.Add("cas", parameterToString(*r.cas, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.variable
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutVariableRequest struct {
	ctx _context.Context
	ApiService *VariablesApiService
	path string
	variable *Variable
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
	cas *int32
}

func (r ApiPutVariableRequest) Variable(variable Variable) ApiPutVariableRequest {
	r.variable = &variable
	return r
}
func (r ApiPutVariableRequest) Region(region string) ApiPutVariableRequest {
	r.region = &region
	return r
}
func (r ApiPutVariableRequest) Namespace(namespace string) ApiPutVariableRequest {
	r.namespace = &namespace
	return r
}
func (r ApiPutVariableRequest) XNomadToken(xNomadToken string) ApiPutVariableRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiPutVariableRequest) IdempotencyToken(idempotencyToken string) ApiPutVariableRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}
func (r ApiPutVariableRequest) Cas(cas int32) ApiPutVariableRequest {
	r.cas = &cas
	return r
}

func (r ApiPutVariableRequest) Execute() (Variable, *_nethttp.Response, error) {
	return r.ApiService.PutVariableExecute(r)
}

/*
 * PutVariable Method for PutVariable
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param path A path to a Nomad Variable
 * @return ApiPutVariableRequest
 */
func (a *VariablesApiService) PutVariable(ctx _context.Context, path string) ApiPutVariableRequest {
	return ApiPutVariableRequest{
		ApiService: a,
		ctx: ctx,
		path: path,
	}
}

/*
 * Execute executes the request
 * @return Variable
 */
func (a *VariablesApiService) PutVariableExecute(r ApiPutVariableRequest) (Variable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Variable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariablesApiService.PutVariable")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/var/{path}"
	localVarPath = strings.Replace(localVarPath, "{"+"path"+"}", _neturl.PathEscape(parameterToString(r.path, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.variable == nil {
		return localVarReturnValue, nil, reportError("variable is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	if r.cas != nil {
		localVarQueryParams.Add("cas", parameterToString(*r.cas, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.variable
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
