/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Nomad.Client.Client;
using Nomad.Client.Model;

namespace Nomad.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOperatorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        void DeleteOperatorRaftPeer(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOperatorRaftPeerWithHttpInfo(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>AutopilotConfiguration</returns>
        AutopilotConfiguration GetOperatorAutopilotConfiguration(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of AutopilotConfiguration</returns>
        ApiResponse<AutopilotConfiguration> GetOperatorAutopilotConfigurationWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>OperatorHealthReply</returns>
        OperatorHealthReply GetOperatorAutopilotHealth(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of OperatorHealthReply</returns>
        ApiResponse<OperatorHealthReply> GetOperatorAutopilotHealthWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>RaftConfiguration</returns>
        RaftConfiguration GetOperatorRaftConfiguration(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of RaftConfiguration</returns>
        ApiResponse<RaftConfiguration> GetOperatorRaftConfigurationWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>SchedulerConfigurationResponse</returns>
        SchedulerConfigurationResponse GetOperatorSchedulerConfiguration(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of SchedulerConfigurationResponse</returns>
        ApiResponse<SchedulerConfigurationResponse> GetOperatorSchedulerConfigurationWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulerConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>SchedulerSetConfigurationResponse</returns>
        SchedulerSetConfigurationResponse PostOperatorSchedulerConfiguration(SchedulerConfiguration schedulerConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulerConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of SchedulerSetConfigurationResponse</returns>
        ApiResponse<SchedulerSetConfigurationResponse> PostOperatorSchedulerConfigurationWithHttpInfo(SchedulerConfiguration schedulerConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autopilotConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>bool</returns>
        bool PutOperatorAutopilotConfiguration(AutopilotConfiguration autopilotConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autopilotConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> PutOperatorAutopilotConfigurationWithHttpInfo(AutopilotConfiguration autopilotConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOperatorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOperatorRaftPeerAsync(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOperatorRaftPeerWithHttpInfoAsync(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AutopilotConfiguration</returns>
        System.Threading.Tasks.Task<AutopilotConfiguration> GetOperatorAutopilotConfigurationAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AutopilotConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutopilotConfiguration>> GetOperatorAutopilotConfigurationWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperatorHealthReply</returns>
        System.Threading.Tasks.Task<OperatorHealthReply> GetOperatorAutopilotHealthAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperatorHealthReply)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperatorHealthReply>> GetOperatorAutopilotHealthWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RaftConfiguration</returns>
        System.Threading.Tasks.Task<RaftConfiguration> GetOperatorRaftConfigurationAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RaftConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<RaftConfiguration>> GetOperatorRaftConfigurationWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchedulerConfigurationResponse</returns>
        System.Threading.Tasks.Task<SchedulerConfigurationResponse> GetOperatorSchedulerConfigurationAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchedulerConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchedulerConfigurationResponse>> GetOperatorSchedulerConfigurationWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulerConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchedulerSetConfigurationResponse</returns>
        System.Threading.Tasks.Task<SchedulerSetConfigurationResponse> PostOperatorSchedulerConfigurationAsync(SchedulerConfiguration schedulerConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulerConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchedulerSetConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchedulerSetConfigurationResponse>> PostOperatorSchedulerConfigurationWithHttpInfoAsync(SchedulerConfiguration schedulerConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autopilotConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> PutOperatorAutopilotConfigurationAsync(AutopilotConfiguration autopilotConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autopilotConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> PutOperatorAutopilotConfigurationWithHttpInfoAsync(AutopilotConfiguration autopilotConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOperatorApi : IOperatorApiSync, IOperatorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OperatorApi : IOperatorApi
    {
        private Nomad.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OperatorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OperatorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OperatorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OperatorApi(string basePath)
        {
            this.Configuration = Nomad.Client.Client.Configuration.MergeConfigurations(
                Nomad.Client.Client.GlobalConfiguration.Instance,
                new Nomad.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Nomad.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Nomad.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Nomad.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OperatorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OperatorApi(Nomad.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Nomad.Client.Client.Configuration.MergeConfigurations(
                Nomad.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Nomad.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Nomad.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Nomad.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OperatorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OperatorApi(Nomad.Client.Client.ISynchronousClient client, Nomad.Client.Client.IAsynchronousClient asyncClient, Nomad.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Nomad.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Nomad.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Nomad.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nomad.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nomad.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        public void DeleteOperatorRaftPeer(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            DeleteOperatorRaftPeerWithHttpInfo(region, _namespace, xNomadToken, idempotencyToken);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Nomad.Client.Client.ApiResponse<Object> DeleteOperatorRaftPeerWithHttpInfo(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/operator/raft/peer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOperatorRaftPeer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOperatorRaftPeerAsync(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteOperatorRaftPeerWithHttpInfoAsync(region, _namespace, xNomadToken, idempotencyToken, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Nomad.Client.Client.ApiResponse<Object>> DeleteOperatorRaftPeerWithHttpInfoAsync(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/operator/raft/peer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOperatorRaftPeer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>AutopilotConfiguration</returns>
        public AutopilotConfiguration GetOperatorAutopilotConfiguration(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            Nomad.Client.Client.ApiResponse<AutopilotConfiguration> localVarResponse = GetOperatorAutopilotConfigurationWithHttpInfo(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of AutopilotConfiguration</returns>
        public Nomad.Client.Client.ApiResponse<AutopilotConfiguration> GetOperatorAutopilotConfigurationWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Nomad.Client.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AutopilotConfiguration>("/operator/autopilot/configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperatorAutopilotConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AutopilotConfiguration</returns>
        public async System.Threading.Tasks.Task<AutopilotConfiguration> GetOperatorAutopilotConfigurationAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Nomad.Client.Client.ApiResponse<AutopilotConfiguration> localVarResponse = await GetOperatorAutopilotConfigurationWithHttpInfoAsync(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AutopilotConfiguration)</returns>
        public async System.Threading.Tasks.Task<Nomad.Client.Client.ApiResponse<AutopilotConfiguration>> GetOperatorAutopilotConfigurationWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Nomad.Client.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AutopilotConfiguration>("/operator/autopilot/configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperatorAutopilotConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>OperatorHealthReply</returns>
        public OperatorHealthReply GetOperatorAutopilotHealth(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            Nomad.Client.Client.ApiResponse<OperatorHealthReply> localVarResponse = GetOperatorAutopilotHealthWithHttpInfo(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of OperatorHealthReply</returns>
        public Nomad.Client.Client.ApiResponse<OperatorHealthReply> GetOperatorAutopilotHealthWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Nomad.Client.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OperatorHealthReply>("/operator/autopilot/health", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperatorAutopilotHealth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperatorHealthReply</returns>
        public async System.Threading.Tasks.Task<OperatorHealthReply> GetOperatorAutopilotHealthAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Nomad.Client.Client.ApiResponse<OperatorHealthReply> localVarResponse = await GetOperatorAutopilotHealthWithHttpInfoAsync(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperatorHealthReply)</returns>
        public async System.Threading.Tasks.Task<Nomad.Client.Client.ApiResponse<OperatorHealthReply>> GetOperatorAutopilotHealthWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Nomad.Client.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OperatorHealthReply>("/operator/autopilot/health", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperatorAutopilotHealth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>RaftConfiguration</returns>
        public RaftConfiguration GetOperatorRaftConfiguration(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            Nomad.Client.Client.ApiResponse<RaftConfiguration> localVarResponse = GetOperatorRaftConfigurationWithHttpInfo(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of RaftConfiguration</returns>
        public Nomad.Client.Client.ApiResponse<RaftConfiguration> GetOperatorRaftConfigurationWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Nomad.Client.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RaftConfiguration>("/operator/raft/configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperatorRaftConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RaftConfiguration</returns>
        public async System.Threading.Tasks.Task<RaftConfiguration> GetOperatorRaftConfigurationAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Nomad.Client.Client.ApiResponse<RaftConfiguration> localVarResponse = await GetOperatorRaftConfigurationWithHttpInfoAsync(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RaftConfiguration)</returns>
        public async System.Threading.Tasks.Task<Nomad.Client.Client.ApiResponse<RaftConfiguration>> GetOperatorRaftConfigurationWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Nomad.Client.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RaftConfiguration>("/operator/raft/configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperatorRaftConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>SchedulerConfigurationResponse</returns>
        public SchedulerConfigurationResponse GetOperatorSchedulerConfiguration(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            Nomad.Client.Client.ApiResponse<SchedulerConfigurationResponse> localVarResponse = GetOperatorSchedulerConfigurationWithHttpInfo(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of SchedulerConfigurationResponse</returns>
        public Nomad.Client.Client.ApiResponse<SchedulerConfigurationResponse> GetOperatorSchedulerConfigurationWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Nomad.Client.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SchedulerConfigurationResponse>("/operator/scheduler/configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperatorSchedulerConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchedulerConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<SchedulerConfigurationResponse> GetOperatorSchedulerConfigurationAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Nomad.Client.Client.ApiResponse<SchedulerConfigurationResponse> localVarResponse = await GetOperatorSchedulerConfigurationWithHttpInfoAsync(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchedulerConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<Nomad.Client.Client.ApiResponse<SchedulerConfigurationResponse>> GetOperatorSchedulerConfigurationWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Nomad.Client.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchedulerConfigurationResponse>("/operator/scheduler/configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperatorSchedulerConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulerConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>SchedulerSetConfigurationResponse</returns>
        public SchedulerSetConfigurationResponse PostOperatorSchedulerConfiguration(SchedulerConfiguration schedulerConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            Nomad.Client.Client.ApiResponse<SchedulerSetConfigurationResponse> localVarResponse = PostOperatorSchedulerConfigurationWithHttpInfo(schedulerConfiguration, region, _namespace, xNomadToken, idempotencyToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulerConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of SchedulerSetConfigurationResponse</returns>
        public Nomad.Client.Client.ApiResponse<SchedulerSetConfigurationResponse> PostOperatorSchedulerConfigurationWithHttpInfo(SchedulerConfiguration schedulerConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            // verify the required parameter 'schedulerConfiguration' is set
            if (schedulerConfiguration == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'schedulerConfiguration' when calling OperatorApi->PostOperatorSchedulerConfiguration");

            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = schedulerConfiguration;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SchedulerSetConfigurationResponse>("/operator/scheduler/configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOperatorSchedulerConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulerConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchedulerSetConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<SchedulerSetConfigurationResponse> PostOperatorSchedulerConfigurationAsync(SchedulerConfiguration schedulerConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Nomad.Client.Client.ApiResponse<SchedulerSetConfigurationResponse> localVarResponse = await PostOperatorSchedulerConfigurationWithHttpInfoAsync(schedulerConfiguration, region, _namespace, xNomadToken, idempotencyToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulerConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchedulerSetConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<Nomad.Client.Client.ApiResponse<SchedulerSetConfigurationResponse>> PostOperatorSchedulerConfigurationWithHttpInfoAsync(SchedulerConfiguration schedulerConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schedulerConfiguration' is set
            if (schedulerConfiguration == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'schedulerConfiguration' when calling OperatorApi->PostOperatorSchedulerConfiguration");


            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = schedulerConfiguration;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SchedulerSetConfigurationResponse>("/operator/scheduler/configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOperatorSchedulerConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autopilotConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>bool</returns>
        public bool PutOperatorAutopilotConfiguration(AutopilotConfiguration autopilotConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            Nomad.Client.Client.ApiResponse<bool> localVarResponse = PutOperatorAutopilotConfigurationWithHttpInfo(autopilotConfiguration, region, _namespace, xNomadToken, idempotencyToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autopilotConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public Nomad.Client.Client.ApiResponse<bool> PutOperatorAutopilotConfigurationWithHttpInfo(AutopilotConfiguration autopilotConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            // verify the required parameter 'autopilotConfiguration' is set
            if (autopilotConfiguration == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'autopilotConfiguration' when calling OperatorApi->PutOperatorAutopilotConfiguration");

            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = autopilotConfiguration;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<bool>("/operator/autopilot/configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutOperatorAutopilotConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autopilotConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> PutOperatorAutopilotConfigurationAsync(AutopilotConfiguration autopilotConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Nomad.Client.Client.ApiResponse<bool> localVarResponse = await PutOperatorAutopilotConfigurationWithHttpInfoAsync(autopilotConfiguration, region, _namespace, xNomadToken, idempotencyToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autopilotConfiguration"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<Nomad.Client.Client.ApiResponse<bool>> PutOperatorAutopilotConfigurationWithHttpInfoAsync(AutopilotConfiguration autopilotConfiguration, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'autopilotConfiguration' is set
            if (autopilotConfiguration == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'autopilotConfiguration' when calling OperatorApi->PutOperatorAutopilotConfiguration");


            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = autopilotConfiguration;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<bool>("/operator/autopilot/configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutOperatorAutopilotConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
