/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Nomad.Client.Client;
using Nomad.Client.Model;

namespace Nomad.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnterpriseApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        void CreateQuotaSpec(QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateQuotaSpecWithHttpInfo(QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        void DeleteQuotaSpec(string specName, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteQuotaSpecWithHttpInfo(string specName, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>QuotaSpec</returns>
        QuotaSpec GetQuotaSpec(string specName, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of QuotaSpec</returns>
        ApiResponse<QuotaSpec> GetQuotaSpecWithHttpInfo(string specName, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetQuotas(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetQuotasWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        void PostQuotaSpec(string specName, QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostQuotaSpecWithHttpInfo(string specName, QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnterpriseApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateQuotaSpecAsync(QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateQuotaSpecWithHttpInfoAsync(QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteQuotaSpecAsync(string specName, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuotaSpecWithHttpInfoAsync(string specName, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotaSpec</returns>
        System.Threading.Tasks.Task<QuotaSpec> GetQuotaSpecAsync(string specName, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotaSpec)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuotaSpec>> GetQuotaSpecWithHttpInfoAsync(string specName, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetQuotasAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetQuotasWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostQuotaSpecAsync(string specName, QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostQuotaSpecWithHttpInfoAsync(string specName, QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnterpriseApi : IEnterpriseApiSync, IEnterpriseApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnterpriseApi : IEnterpriseApi
    {
        private Nomad.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnterpriseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnterpriseApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnterpriseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnterpriseApi(string basePath)
        {
            this.Configuration = Nomad.Client.Client.Configuration.MergeConfigurations(
                Nomad.Client.Client.GlobalConfiguration.Instance,
                new Nomad.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Nomad.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Nomad.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Nomad.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnterpriseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnterpriseApi(Nomad.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Nomad.Client.Client.Configuration.MergeConfigurations(
                Nomad.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Nomad.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Nomad.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Nomad.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnterpriseApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EnterpriseApi(Nomad.Client.Client.ISynchronousClient client, Nomad.Client.Client.IAsynchronousClient asyncClient, Nomad.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Nomad.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Nomad.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Nomad.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nomad.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nomad.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        public void CreateQuotaSpec(QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            CreateQuotaSpecWithHttpInfo(quotaSpec, region, _namespace, xNomadToken, idempotencyToken);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Nomad.Client.Client.ApiResponse<Object> CreateQuotaSpecWithHttpInfo(QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            // verify the required parameter 'quotaSpec' is set
            if (quotaSpec == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'quotaSpec' when calling EnterpriseApi->CreateQuotaSpec");

            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = quotaSpec;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/quota", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateQuotaSpec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateQuotaSpecAsync(QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateQuotaSpecWithHttpInfoAsync(quotaSpec, region, _namespace, xNomadToken, idempotencyToken, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Nomad.Client.Client.ApiResponse<Object>> CreateQuotaSpecWithHttpInfoAsync(QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'quotaSpec' is set
            if (quotaSpec == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'quotaSpec' when calling EnterpriseApi->CreateQuotaSpec");


            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = quotaSpec;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/quota", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateQuotaSpec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        public void DeleteQuotaSpec(string specName, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            DeleteQuotaSpecWithHttpInfo(specName, region, _namespace, xNomadToken, idempotencyToken);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Nomad.Client.Client.ApiResponse<Object> DeleteQuotaSpecWithHttpInfo(string specName, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            // verify the required parameter 'specName' is set
            if (specName == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'specName' when calling EnterpriseApi->DeleteQuotaSpec");

            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("specName", Nomad.Client.Client.ClientUtils.ParameterToString(specName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/quota/{specName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteQuotaSpec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteQuotaSpecAsync(string specName, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteQuotaSpecWithHttpInfoAsync(specName, region, _namespace, xNomadToken, idempotencyToken, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Nomad.Client.Client.ApiResponse<Object>> DeleteQuotaSpecWithHttpInfoAsync(string specName, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'specName' is set
            if (specName == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'specName' when calling EnterpriseApi->DeleteQuotaSpec");


            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("specName", Nomad.Client.Client.ClientUtils.ParameterToString(specName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/quota/{specName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteQuotaSpec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>QuotaSpec</returns>
        public QuotaSpec GetQuotaSpec(string specName, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            Nomad.Client.Client.ApiResponse<QuotaSpec> localVarResponse = GetQuotaSpecWithHttpInfo(specName, region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of QuotaSpec</returns>
        public Nomad.Client.Client.ApiResponse<QuotaSpec> GetQuotaSpecWithHttpInfo(string specName, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            // verify the required parameter 'specName' is set
            if (specName == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'specName' when calling EnterpriseApi->GetQuotaSpec");

            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("specName", Nomad.Client.Client.ClientUtils.ParameterToString(specName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Nomad.Client.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QuotaSpec>("/quota/{specName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuotaSpec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotaSpec</returns>
        public async System.Threading.Tasks.Task<QuotaSpec> GetQuotaSpecAsync(string specName, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Nomad.Client.Client.ApiResponse<QuotaSpec> localVarResponse = await GetQuotaSpecWithHttpInfoAsync(specName, region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotaSpec)</returns>
        public async System.Threading.Tasks.Task<Nomad.Client.Client.ApiResponse<QuotaSpec>> GetQuotaSpecWithHttpInfoAsync(string specName, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'specName' is set
            if (specName == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'specName' when calling EnterpriseApi->GetQuotaSpec");


            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("specName", Nomad.Client.Client.ClientUtils.ParameterToString(specName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Nomad.Client.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<QuotaSpec>("/quota/{specName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuotaSpec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetQuotas(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            Nomad.Client.Client.ApiResponse<List<Object>> localVarResponse = GetQuotasWithHttpInfo(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public Nomad.Client.Client.ApiResponse<List<Object>> GetQuotasWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Nomad.Client.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Object>>("/quotas", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuotas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetQuotasAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Nomad.Client.Client.ApiResponse<List<Object>> localVarResponse = await GetQuotasWithHttpInfoAsync(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<Nomad.Client.Client.ApiResponse<List<Object>>> GetQuotasWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Nomad.Client.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Object>>("/quotas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuotas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        public void PostQuotaSpec(string specName, QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            PostQuotaSpecWithHttpInfo(specName, quotaSpec, region, _namespace, xNomadToken, idempotencyToken);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Nomad.Client.Client.ApiResponse<Object> PostQuotaSpecWithHttpInfo(string specName, QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            // verify the required parameter 'specName' is set
            if (specName == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'specName' when calling EnterpriseApi->PostQuotaSpec");

            // verify the required parameter 'quotaSpec' is set
            if (quotaSpec == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'quotaSpec' when calling EnterpriseApi->PostQuotaSpec");

            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("specName", Nomad.Client.Client.ClientUtils.ParameterToString(specName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = quotaSpec;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/quota/{specName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostQuotaSpec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostQuotaSpecAsync(string specName, QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostQuotaSpecWithHttpInfoAsync(specName, quotaSpec, region, _namespace, xNomadToken, idempotencyToken, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Nomad.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specName">The quota spec identifier.</param>
        /// <param name="quotaSpec"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Nomad.Client.Client.ApiResponse<Object>> PostQuotaSpecWithHttpInfoAsync(string specName, QuotaSpec quotaSpec, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'specName' is set
            if (specName == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'specName' when calling EnterpriseApi->PostQuotaSpec");

            // verify the required parameter 'quotaSpec' is set
            if (quotaSpec == null)
                throw new Nomad.Client.Client.ApiException(400, "Missing required parameter 'quotaSpec' when calling EnterpriseApi->PostQuotaSpec");


            Nomad.Client.Client.RequestOptions localVarRequestOptions = new Nomad.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Nomad.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Nomad.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("specName", Nomad.Client.Client.ClientUtils.ParameterToString(specName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Nomad.Client.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Nomad.Client.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = quotaSpec;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/quota/{specName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostQuotaSpec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
